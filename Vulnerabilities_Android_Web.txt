1. [android:allowBackup] flag is missing

Finding : The application manifest.xml file does not implement configuration for allowing or disallowing backups. By default it is set to true. 

Risk Description : The applows allows anyone to backup application data via adb. It allows users who have enabled USB debugging to copy application data off of the device. This data includes sensitive information like session details of the logged in user.

Recommendation: Implement configuration in the android application’s Manifest.xml file to disallow backups. [android:allowBackup=False]

Reference: https://cwe.mitre.org/data/definitions/312.html

2. Clear text traffic is Enabled for App [android:usesCleartextTraffic=true]

Finding: The application manifest.xml file implements an insecure configuration for the traffic of the application. 

Risk Description: The applows allows  cleartext traffic leading to lack of confidentiality, authenticity, and protections against tampering; a network attacker can eavesdrop on transmitted data and also modify it without being detected.

Recommendation: Implement configuration in the android application’s Manifest.xml file to disallow clear text traffic.
[android:usesCleartextTraffic=False]

3. CORS Misconfiguration

Finding: The web application has a misconfigured CORS header to allow access to requests from any origin.

Risk Description : Websites use CORS to allow access from subdomains and trusted third parties. The email communication application allows any domain to make requests to it and access data and sensitive information to send it to the attacker controller server.

Recommendation: • It is recommended to avoid usage of dynamically generatated access control headers.
• If the above solution is not possible, rigorous testing should be done to programmatically verify the domain names.

Reference: https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing

4. Missing rate limiting for emails

Finding: The application sends an email for every failed login attempt. There is no rate limiting implemented for the number of emails sent for failed login attempts. 

Risk Description: E-mail bombs hack may create Denial of service (DoS) conditions against your e-mail software and even network and Internet connection by taking up a large amount of bandwidth and, sometimes, requiring large amounts of storage space. 
It can also impact the reputation of the domain for sending mass emails in short time.

Recommendation: Implement rate limiting for outgoing emails as per a suitable mechanism menionted in the reference.

Reference: https://cloud.google.com/architecture/rate-limiting-strategies-techniques#techniques-enforcing-rate-limits

5. Missing rate limiting for OTP

Finding: The application sends OTP over email and phone as second factor for login attempts. There is no rate limiting implemented for the number of emails sent for login attempts.

Risk Description:  OTP bombs hack may create Denial of service (DoS) conditions against your OTP software and even network and Internet connection by taking up a large amount of bandwidth and, sometimes, requiring expensive costs for sending the OTPs. 
It can also impact the reputation of the domain for sending large number of OTPs in short time.

6. Application can be installed on an emulator

Finding: The banking application can be installed on an emulator. 

Risk Description: The application does not implement emulation detection techniques. It is possible for attackers to load the application in an emulated environment and reverse engineer the traffic and code to find vulnerabilities.

Recommendation: Implement emulator detection mechanisms in the application to not work if an emulator is detected.

Reference: https://www.cryptomathic.com/news-events/blog/app-hardening-for-mobile-banking-and-payment-apps-emulator-detection

7. Internal hostname disclosure

Finding: The application traffic discloses an internal hostname of a machine and  nomenclature of the systems used in the internal network of the organization.

Risk Description: An attacker can chain this information with other vulnerabilities to perform activities like exploitation of internal networks, lateral movement and privilege escalations. 

Recommendation: Configure the application to not disclose internal hostnames in the traffic intended for external networks.

Reference: NA

8. Insertion of Sensitive Information into Log File [Logcat]

Finding: The application logs sensitive information in the logs of the application.

Risk Description: The app logs senstive information to logs and other applications on the rooted device can access these logs for information.

Recommendation: It is recommended to not log any sensitive information in the logs of the application.

Reference: https://cwe.mitre.org/data/definitions/532.html

9. No code obfuscation

Finding: The application does not implement code obfuscation for protection against reverse engineering.

Risk Description: Mobile applications can be reverse engineered using readily available disassemblers and/or decompilers, making it easy for hackers to access and analyze the source code of your applications. Hackers can then:
      Steal intellectual property & clone applications
      Extract sensitive information & harvest credentials
      Identify vulnerabilities
      Add malicious code to apps & repackage them

Recommendation: It is recommended to implement code obfuscation techniques to protect it against reverese engineering attempts.

Code obfuscation strategies include:
      Renaming classes, fields, methods, libraries etc.
      Altering the structure of the code
      Transforming arithmetic and logical expressions
      Encryption of strings, classes etc.
      Removing certain metadata
      Hiding calls to sensitive APIs, and more
      
Reference: https://owasp.org/www-project-mobile-top-10/2016-risks/m9-reverse-engineering

10. Application can be installed on a rooted device

Finding: The application does not implement root detection mechanisms and can be installed on a rooted android device.

Risk Description: It is possible for other applications installed on a rooted device to access and modify application data and can lead to exploitation of the logged in users. In the current scenario it is possible for the other applications to hijack the stored session cookies of the logged in user to compromise the account.

Recommendation: Implement root detection mechanisms to identify if the application is installed on a rooted device and configure the application to not work in case the detection is true.

Reference: https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements 
https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering


11. Application signed with weak signature scheme

Finding: Application is signed with v1 signature scheme, making it vulnerable to Janus vulnerability on Android 5.0-8.0, if signed only with v1 signature scheme. Applications running on Android 5.0-7.0 signed with v1, and v2/v3 scheme is also vulnerable.

Risk Description: It is possible for an attacker to get  unverified code with powerful permissions installed on the device of unsuspecting users. This vulnerability can be exploited to pass a modified clone of the banking application. The cloned application will look and behave like the original application but inject malicious behavior.

Recommendation: Sign the application using only v2 and v3 signature scheme.

Reference: https://digital.nhs.uk/cyber-alerts/2017/cc-1886
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-13156

12. Application signed with debug certificate and debug mode enabled

Finding: Application signed with a debug certificate. 
Debug Enabled For App
[android:debuggable=true]


Risk Description: Application signed with a debug certificate. Production application must not be shipped with a debug certificate.
Debugging was enabled on the app which makes it easier for reverse engineers to hook a debugger to it. This allows dumping a stack trace and accessing debugging helper classes.

Recommendation: Sign the application using a custom self-signed certificate.

Reference: https://developer.android.com/studio/publish/app-signing























